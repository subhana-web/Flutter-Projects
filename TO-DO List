Flutter To-Do List Application
Welcome to the Flutter To-Do List Application repository! ðŸŽ‰ This project demonstrates a feature-rich to-do list app built with Flutter, showcasing dynamic task management and an engaging user interface.

Features
Task Management: Add, view, and manage tasks with a clean and intuitive interface.
Customizable UI: Enjoy a visually appealing design with gradient backgrounds and task-specific icons.
Real-Time Updates: Interact with tasks dynamically and see updates instantly.
User Interaction: Add new tasks through an easy-to-use dialog interface and toggle task completion status with a simple tap.


CODE :
import 'package:flutter/material.dart';

class TodoListApp extends StatefulWidget {
  @override
  _TodoListAppState createState() => _TodoListAppState();
}

class _TodoListAppState extends State<TodoListApp> {
  List<bool> taskStatus = [true, false, false, false, false, false];

  List<Map<String, String>> tasks = [
    {"title": "MEETING", "time": "07:30 AM"},
    {"title": "ONAIR RADIO APP DESIGN", "time": "08:00 AM"},
    {"title": "REPLY TO EMAILS", "time": "10:30 AM"},
    {"title": "PAY BILLS", "time": "11:30 AM"},
    {"title": "DESIGN 'DAILY UI'", "time": "01:00 PM"},
    {"title": "SEND PROJECT FILES", "time": "03:00 PM"},
  ];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        backgroundColor: Colors.purple.shade100,
        body: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [Colors.purple.shade700, Colors.blue.shade600],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              SizedBox(height: 50),
              Padding(
                padding: const EdgeInsets.only(left: 20),
                child: Text(
                  "Good morning",
                  style: TextStyle(fontSize: 24, color: Colors.white),
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(left: 20),
                child: Text(
                  "Pathum",
                  style: TextStyle(fontSize: 32, fontWeight: FontWeight.bold, color: Colors.white),
                ),
              ),
              SizedBox(height: 20),
              Padding(
                padding: const EdgeInsets.only(left: 20),
                child: Text(
                  "TODAY'S TASKS",
                  style: TextStyle(fontSize: 16, color: Colors.white),
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(left: 20),
                child: Text(
                  "11 October 2019",
                  style: TextStyle(fontSize: 16, color: Colors.white),
                ),
              ),
              SizedBox(height: 30),
              Center(
                child: ElevatedButton(
                  onPressed: () {
                    _showTaskDialog();
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.white,
                    padding: EdgeInsets.symmetric(vertical: 14, horizontal: 20),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(30),
                    ),
                  ),
                  child: Text(
                    "CREATE TO DO LIST",
                    style: TextStyle(fontSize: 16, color: Colors.purple),
                  ),
                ),
              ),
              SizedBox(height: 20),
              Expanded(
                child: ListView.builder(
                  padding: EdgeInsets.symmetric(horizontal: 20),
                  itemCount: tasks.length,
                  itemBuilder: (context, index) {
                    return buildTask(tasks[index]["title"]!, tasks[index]["time"]!, getIcon(tasks[index]["title"]!), index);
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  IconData getIcon(String title) {
    switch (title) {
      case "MEETING":
        return Icons.event;
      case "ONAIR RADIO APP DESIGN":
        return Icons.design_services;
      case "REPLY TO EMAILS":
        return Icons.email;
      case "PAY BILLS":
        return Icons.payment;
      case "DESIGN 'DAILY UI'":
        return Icons.design_services;
      case "SEND PROJECT FILES":
        return Icons.file_upload;
      default:
        return Icons.task;
    }
  }

  Widget buildTask(String title, String time, IconData icon, int index) {
    return GestureDetector(
      onTap: () {
        setState(() {
          taskStatus[index] = !taskStatus[index];
        });
      },
      child: Container(
        margin: EdgeInsets.only(bottom: 16),
        padding: EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.2),
              spreadRadius: 2,
              blurRadius: 5,
              offset: Offset(0, 3),
            ),
          ],
        ),
        child: Row(
          children: [
            Container(
              padding: EdgeInsets.all(10),
              decoration: BoxDecoration(
                color: getIconColor(title),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(
                icon,
                color: Colors.white,
                size: 28,
              ),
            ),
            SizedBox(width: 10),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.black,
                    ),
                  ),
                  SizedBox(height: 4),
                  Text(
                    time,
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
            ),
            SizedBox(width: 10),
            Icon(
              taskStatus[index] ? Icons.check_circle : Icons.radio_button_unchecked,
              color: taskStatus[index] ? Colors.green : Colors.grey,
              size: 24,
            ),
          ],
        ),
      ),
    );
  }

  Color getIconColor(String title) {
    switch (title) {
      case "MEETING":
        return Colors.blue;
      case "ONAIR RADIO APP DESIGN":
        return Colors.orange;
      case "REPLY TO EMAILS":
        return Colors.green;
      case "PAY BILLS":
        return Colors.blueAccent;
      case "DESIGN 'DAILY UI'":
        return Colors.orange;
      case "SEND PROJECT FILES":
        return Colors.pink;
      default:
        return Colors.grey;
    }
  }

  void _showTaskDialog() {
    String taskTitle = '';
    String taskTime = '';

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('New Task'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                decoration: InputDecoration(labelText: 'Task Title'),
                onChanged: (value) {
                  taskTitle = value;
                },
              ),
              TextField(
                decoration: InputDecoration(labelText: 'Time'),
                onChanged: (value) {
                  taskTime = value;
                },
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                if (taskTitle.isNotEmpty && taskTime.isNotEmpty) {
                  setState(() {
                    tasks.add({"title": taskTitle, "time": taskTime});
                    taskStatus.add(false);
                  });
                  Navigator.of(context).pop();
                }
              },
              child: Text('Add'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('Cancel'),
            ),
          ],
        );
      },
    );
  }
}

void main() {
  runApp(TodoListApp());
}
